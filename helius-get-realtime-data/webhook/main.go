package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
const (
	HeliusAPIKey     = "API_KEY"
	HeliusRPCURL     = "https://mainnet.helius-rpc.com/?api-key=" + HeliusAPIKey
)

// WebhookPayload ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
type WebhookPayload struct {
	Description string `json:"description"`
	Timestamp   int64  `json:"timestamp"`
	Signature   string `json:"signature"`
}

// handleRequest ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
func handleRequest(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
	var payload []WebhookPayload
	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		http.Error(w, "Invalid request", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
	if len(payload) == 0 {
		http.Error(w, "Empty payload", http.StatusBadRequest)
		return
	}

	// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := payload[0]
	txTimestamp := time.Unix(tx.Timestamp, 0).Format("2006-01-02 15:04:05")
	txLink := fmt.Sprintf("https://xray.helius.xyz/tx/%s", tx.Signature)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf(
		"----NEW UPDATE---\nDescription:\n%s\nSignature:\n%s\nTimestamp:\n%s",
		tx.Description, txLink, txTimestamp,
	)

	// –õ–æ–≥–∏—Ä—É–µ–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram)
	log.Println(message)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusOK)
	fmt.Fprintln(w, "Logged POST request body.")
}

func main() {
	http.HandleFunc("/", handleRequest)
	log.Println("üöÄ Server is running on port 8080...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
